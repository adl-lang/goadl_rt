// Code generated by goadlc v3 - DO NOT EDIT.
package annotations

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_CustomSerialization() adlast.ATypeExpr[CustomSerialization] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.annotations", "CustomSerialization"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[CustomSerialization](te)
}

func AST_CustomSerialization() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"CustomSerialization",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"Bool",
					),
					[]adlast.TypeExpr{},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.annotations", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("sys.annotations", "CustomSerialization"),
		AST_CustomSerialization(),
	)
}

func Texpr_Doc() adlast.ATypeExpr[Doc] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.annotations", "Doc"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Doc](te)
}

func AST_Doc() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Doc",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"String",
					),
					[]adlast.TypeExpr{},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.annotations", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("sys.annotations", "Doc"),
		AST_Doc(),
	)
}

func Texpr_SerializedName() adlast.ATypeExpr[SerializedName] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.annotations", "SerializedName"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[SerializedName](te)
}

func AST_SerializedName() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"SerializedName",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"String",
					),
					[]adlast.TypeExpr{},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.annotations", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("sys.annotations", "SerializedName"),
		AST_SerializedName(),
	)
}

func Texpr_SerializedWithInternalTag() adlast.ATypeExpr[SerializedWithInternalTag] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.annotations", "SerializedWithInternalTag"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[SerializedWithInternalTag](te)
}

func AST_SerializedWithInternalTag() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"SerializedWithInternalTag",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"tag",
						"tag",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.annotations", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("sys.annotations", "SerializedWithInternalTag"),
		AST_SerializedWithInternalTag(),
	)
}
