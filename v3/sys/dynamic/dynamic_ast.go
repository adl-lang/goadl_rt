// Code generated by goadlc v3 - DO NOT EDIT.
package dynamic

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_Dynamic() adlast.ATypeExpr[Dynamic] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.dynamic", "Dynamic"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[Dynamic](te)
}

func AST_Dynamic() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"Dynamic",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"typeExpr",
						"typeExpr",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_reference(
								adlast.MakeAll_ScopedName(
									"sys.adlast",
									"TypeExpr",
								),
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"value",
						"value",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Json",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "A serialised value along with  its type\n"},
	)
	return adlast.Make_ScopedDecl("sys.dynamic", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("sys.dynamic", "Dynamic"),
		AST_Dynamic(),
	)
}
