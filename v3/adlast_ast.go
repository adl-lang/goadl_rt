// Code generated by goadlc v3 - DO NOT EDIT.
package goadl

import (
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	. "github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_Annotations() ATypeExpr[Annotations] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.adlast", "Annotations"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[Annotations]{
		Value: te,
	}
}

func AST_Annotations() adlast.ScopedDecl {
	decl := MakeAll_Decl(
		"Annotations",
		types.Make_Maybe_nothing[uint32](),
		Make_DeclType_type_(
			MakeAll_TypeDef(
				[]Ident{},
				MakeAll_TypeExpr(
					Make_TypeRef_reference(
						MakeAll_ScopedName(
							"sys.types",
							"Map",
						),
					),
					[]TypeExpr{
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"ScopedName",
								),
							),
							[]TypeExpr{},
						),
						MakeAll_TypeExpr(
							Make_TypeRef_primitive(
								"Json",
							),
							[]TypeExpr{},
						),
					},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.adlast", decl)
}

func init() {
	RESOLVER.Register(
		adlast.Make_ScopedName("sys.adlast", "Annotations"),
		AST_Annotations(),
	)
}

func Texpr_Decl() ATypeExpr[Decl] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.adlast", "Decl"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[Decl]{
		Value: te,
	}
}

func AST_Decl() adlast.ScopedDecl {
	decl := MakeAll_Decl(
		"Decl",
		types.Make_Maybe_nothing[uint32](),
		Make_DeclType_struct_(
			MakeAll_Struct(
				[]Ident{},
				[]Field{
					MakeAll_Field(
						"name",
						"name",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"Ident",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"version",
						"version",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.types",
									"Maybe",
								),
							),
							[]TypeExpr{
								MakeAll_TypeExpr(
									Make_TypeRef_primitive(
										"Word32",
									),
									[]TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"type_",
						"type_",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"DeclType",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"annotations",
						"annotations",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"Annotations",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.adlast", decl)
}

func init() {
	RESOLVER.Register(
		adlast.Make_ScopedName("sys.adlast", "Decl"),
		AST_Decl(),
	)
}

func Texpr_DeclType() ATypeExpr[DeclType] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.adlast", "DeclType"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[DeclType]{
		Value: te,
	}
}

func AST_DeclType() adlast.ScopedDecl {
	decl := MakeAll_Decl(
		"DeclType",
		types.Make_Maybe_nothing[uint32](),
		Make_DeclType_union_(
			MakeAll_Union(
				[]Ident{},
				[]Field{
					MakeAll_Field(
						"struct_",
						"struct_",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"Struct",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"union_",
						"union_",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"Union",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"type_",
						"type_",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"TypeDef",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"newtype_",
						"newtype_",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"NewType",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.adlast", decl)
}

func init() {
	RESOLVER.Register(
		adlast.Make_ScopedName("sys.adlast", "DeclType"),
		AST_DeclType(),
	)
}

func Texpr_DeclVersions() ATypeExpr[DeclVersions] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.adlast", "DeclVersions"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[DeclVersions]{
		Value: te,
	}
}

func AST_DeclVersions() adlast.ScopedDecl {
	decl := MakeAll_Decl(
		"DeclVersions",
		types.Make_Maybe_nothing[uint32](),
		Make_DeclType_type_(
			MakeAll_TypeDef(
				[]Ident{},
				MakeAll_TypeExpr(
					Make_TypeRef_primitive(
						"Vector",
					),
					[]TypeExpr{
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"Decl",
								),
							),
							[]TypeExpr{},
						),
					},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.adlast", decl)
}

func init() {
	RESOLVER.Register(
		adlast.Make_ScopedName("sys.adlast", "DeclVersions"),
		AST_DeclVersions(),
	)
}

func Texpr_Field() ATypeExpr[Field] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.adlast", "Field"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[Field]{
		Value: te,
	}
}

func AST_Field() adlast.ScopedDecl {
	decl := MakeAll_Decl(
		"Field",
		types.Make_Maybe_nothing[uint32](),
		Make_DeclType_struct_(
			MakeAll_Struct(
				[]Ident{},
				[]Field{
					MakeAll_Field(
						"name",
						"name",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"Ident",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"serializedName",
						"serializedName",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"Ident",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"typeExpr",
						"typeExpr",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"TypeExpr",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"default",
						"default",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.types",
									"Maybe",
								),
							),
							[]TypeExpr{
								MakeAll_TypeExpr(
									Make_TypeRef_primitive(
										"Json",
									),
									[]TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"annotations",
						"annotations",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"Annotations",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.adlast", decl)
}

func init() {
	RESOLVER.Register(
		adlast.Make_ScopedName("sys.adlast", "Field"),
		AST_Field(),
	)
}

func Texpr_Ident() ATypeExpr[Ident] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.adlast", "Ident"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[Ident]{
		Value: te,
	}
}

func AST_Ident() adlast.ScopedDecl {
	decl := MakeAll_Decl(
		"Ident",
		types.Make_Maybe_nothing[uint32](),
		Make_DeclType_type_(
			MakeAll_TypeDef(
				[]Ident{},
				MakeAll_TypeExpr(
					Make_TypeRef_primitive(
						"String",
					),
					[]TypeExpr{},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.adlast", decl)
}

func init() {
	RESOLVER.Register(
		adlast.Make_ScopedName("sys.adlast", "Ident"),
		AST_Ident(),
	)
}

func Texpr_Import() ATypeExpr[Import] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.adlast", "Import"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[Import]{
		Value: te,
	}
}

func AST_Import() adlast.ScopedDecl {
	decl := MakeAll_Decl(
		"Import",
		types.Make_Maybe_nothing[uint32](),
		Make_DeclType_union_(
			MakeAll_Union(
				[]Ident{},
				[]Field{
					MakeAll_Field(
						"moduleName",
						"moduleName",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"ModuleName",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"scopedName",
						"scopedName",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"ScopedName",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.adlast", decl)
}

func init() {
	RESOLVER.Register(
		adlast.Make_ScopedName("sys.adlast", "Import"),
		AST_Import(),
	)
}

func Texpr_Module() ATypeExpr[Module] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.adlast", "Module"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[Module]{
		Value: te,
	}
}

func AST_Module() adlast.ScopedDecl {
	decl := MakeAll_Decl(
		"Module",
		types.Make_Maybe_nothing[uint32](),
		Make_DeclType_struct_(
			MakeAll_Struct(
				[]Ident{},
				[]Field{
					MakeAll_Field(
						"name",
						"name",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"ModuleName",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"imports",
						"imports",
						MakeAll_TypeExpr(
							Make_TypeRef_primitive(
								"Vector",
							),
							[]TypeExpr{
								MakeAll_TypeExpr(
									Make_TypeRef_reference(
										MakeAll_ScopedName(
											"sys.adlast",
											"Import",
										),
									),
									[]TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"decls",
						"decls",
						MakeAll_TypeExpr(
							Make_TypeRef_primitive(
								"StringMap",
							),
							[]TypeExpr{
								MakeAll_TypeExpr(
									Make_TypeRef_reference(
										MakeAll_ScopedName(
											"sys.adlast",
											"Decl",
										),
									),
									[]TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"annotations",
						"annotations",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"Annotations",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.adlast", decl)
}

func init() {
	RESOLVER.Register(
		adlast.Make_ScopedName("sys.adlast", "Module"),
		AST_Module(),
	)
}

func Texpr_ModuleName() ATypeExpr[ModuleName] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.adlast", "ModuleName"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[ModuleName]{
		Value: te,
	}
}

func AST_ModuleName() adlast.ScopedDecl {
	decl := MakeAll_Decl(
		"ModuleName",
		types.Make_Maybe_nothing[uint32](),
		Make_DeclType_type_(
			MakeAll_TypeDef(
				[]Ident{},
				MakeAll_TypeExpr(
					Make_TypeRef_primitive(
						"String",
					),
					[]TypeExpr{},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.adlast", decl)
}

func init() {
	RESOLVER.Register(
		adlast.Make_ScopedName("sys.adlast", "ModuleName"),
		AST_ModuleName(),
	)
}

func Texpr_NewType() ATypeExpr[NewType] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.adlast", "NewType"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[NewType]{
		Value: te,
	}
}

func AST_NewType() adlast.ScopedDecl {
	decl := MakeAll_Decl(
		"NewType",
		types.Make_Maybe_nothing[uint32](),
		Make_DeclType_struct_(
			MakeAll_Struct(
				[]Ident{},
				[]Field{
					MakeAll_Field(
						"typeParams",
						"typeParams",
						MakeAll_TypeExpr(
							Make_TypeRef_primitive(
								"Vector",
							),
							[]TypeExpr{
								MakeAll_TypeExpr(
									Make_TypeRef_reference(
										MakeAll_ScopedName(
											"sys.adlast",
											"Ident",
										),
									),
									[]TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"typeExpr",
						"typeExpr",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"TypeExpr",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"default",
						"default",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.types",
									"Maybe",
								),
							),
							[]TypeExpr{
								MakeAll_TypeExpr(
									Make_TypeRef_primitive(
										"Json",
									),
									[]TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.adlast", decl)
}

func init() {
	RESOLVER.Register(
		adlast.Make_ScopedName("sys.adlast", "NewType"),
		AST_NewType(),
	)
}

func Texpr_ScopedDecl() ATypeExpr[ScopedDecl] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.adlast", "ScopedDecl"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[ScopedDecl]{
		Value: te,
	}
}

func AST_ScopedDecl() adlast.ScopedDecl {
	decl := MakeAll_Decl(
		"ScopedDecl",
		types.Make_Maybe_nothing[uint32](),
		Make_DeclType_struct_(
			MakeAll_Struct(
				[]Ident{},
				[]Field{
					MakeAll_Field(
						"moduleName",
						"moduleName",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"ModuleName",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"decl",
						"decl",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"Decl",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.adlast", decl)
}

func init() {
	RESOLVER.Register(
		adlast.Make_ScopedName("sys.adlast", "ScopedDecl"),
		AST_ScopedDecl(),
	)
}

func Texpr_ScopedName() ATypeExpr[ScopedName] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.adlast", "ScopedName"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[ScopedName]{
		Value: te,
	}
}

func AST_ScopedName() adlast.ScopedDecl {
	decl := MakeAll_Decl(
		"ScopedName",
		types.Make_Maybe_nothing[uint32](),
		Make_DeclType_struct_(
			MakeAll_Struct(
				[]Ident{},
				[]Field{
					MakeAll_Field(
						"moduleName",
						"moduleName",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"ModuleName",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"name",
						"name",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"Ident",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.adlast", decl)
}

func init() {
	RESOLVER.Register(
		adlast.Make_ScopedName("sys.adlast", "ScopedName"),
		AST_ScopedName(),
	)
}

func Texpr_Struct() ATypeExpr[Struct] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.adlast", "Struct"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[Struct]{
		Value: te,
	}
}

func AST_Struct() adlast.ScopedDecl {
	decl := MakeAll_Decl(
		"Struct",
		types.Make_Maybe_nothing[uint32](),
		Make_DeclType_struct_(
			MakeAll_Struct(
				[]Ident{},
				[]Field{
					MakeAll_Field(
						"typeParams",
						"typeParams",
						MakeAll_TypeExpr(
							Make_TypeRef_primitive(
								"Vector",
							),
							[]TypeExpr{
								MakeAll_TypeExpr(
									Make_TypeRef_reference(
										MakeAll_ScopedName(
											"sys.adlast",
											"Ident",
										),
									),
									[]TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"fields",
						"fields",
						MakeAll_TypeExpr(
							Make_TypeRef_primitive(
								"Vector",
							),
							[]TypeExpr{
								MakeAll_TypeExpr(
									Make_TypeRef_reference(
										MakeAll_ScopedName(
											"sys.adlast",
											"Field",
										),
									),
									[]TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.adlast", decl)
}

func init() {
	RESOLVER.Register(
		adlast.Make_ScopedName("sys.adlast", "Struct"),
		AST_Struct(),
	)
}

func Texpr_TypeDef() ATypeExpr[TypeDef] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.adlast", "TypeDef"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[TypeDef]{
		Value: te,
	}
}

func AST_TypeDef() adlast.ScopedDecl {
	decl := MakeAll_Decl(
		"TypeDef",
		types.Make_Maybe_nothing[uint32](),
		Make_DeclType_struct_(
			MakeAll_Struct(
				[]Ident{},
				[]Field{
					MakeAll_Field(
						"typeParams",
						"typeParams",
						MakeAll_TypeExpr(
							Make_TypeRef_primitive(
								"Vector",
							),
							[]TypeExpr{
								MakeAll_TypeExpr(
									Make_TypeRef_reference(
										MakeAll_ScopedName(
											"sys.adlast",
											"Ident",
										),
									),
									[]TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"typeExpr",
						"typeExpr",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"TypeExpr",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.adlast", decl)
}

func init() {
	RESOLVER.Register(
		adlast.Make_ScopedName("sys.adlast", "TypeDef"),
		AST_TypeDef(),
	)
}

func Texpr_TypeExpr() ATypeExpr[TypeExpr] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.adlast", "TypeExpr"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[TypeExpr]{
		Value: te,
	}
}

func AST_TypeExpr() adlast.ScopedDecl {
	decl := MakeAll_Decl(
		"TypeExpr",
		types.Make_Maybe_nothing[uint32](),
		Make_DeclType_struct_(
			MakeAll_Struct(
				[]Ident{},
				[]Field{
					MakeAll_Field(
						"typeRef",
						"typeRef",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"TypeRef",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"parameters",
						"parameters",
						MakeAll_TypeExpr(
							Make_TypeRef_primitive(
								"Vector",
							),
							[]TypeExpr{
								MakeAll_TypeExpr(
									Make_TypeRef_reference(
										MakeAll_ScopedName(
											"sys.adlast",
											"TypeExpr",
										),
									),
									[]TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.adlast", decl)
}

func init() {
	RESOLVER.Register(
		adlast.Make_ScopedName("sys.adlast", "TypeExpr"),
		AST_TypeExpr(),
	)
}

func Texpr_TypeRef() ATypeExpr[TypeRef] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.adlast", "TypeRef"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[TypeRef]{
		Value: te,
	}
}

func AST_TypeRef() adlast.ScopedDecl {
	decl := MakeAll_Decl(
		"TypeRef",
		types.Make_Maybe_nothing[uint32](),
		Make_DeclType_union_(
			MakeAll_Union(
				[]Ident{},
				[]Field{
					MakeAll_Field(
						"primitive",
						"primitive",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"Ident",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"typeParam",
						"typeParam",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"Ident",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"reference",
						"reference",
						MakeAll_TypeExpr(
							Make_TypeRef_reference(
								MakeAll_ScopedName(
									"sys.adlast",
									"ScopedName",
								),
							),
							[]TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.adlast", decl)
}

func init() {
	RESOLVER.Register(
		adlast.Make_ScopedName("sys.adlast", "TypeRef"),
		AST_TypeRef(),
	)
}

func Texpr_Union() ATypeExpr[Union] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("sys.adlast", "Union"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[Union]{
		Value: te,
	}
}

func AST_Union() adlast.ScopedDecl {
	decl := MakeAll_Decl(
		"Union",
		types.Make_Maybe_nothing[uint32](),
		Make_DeclType_struct_(
			MakeAll_Struct(
				[]Ident{},
				[]Field{
					MakeAll_Field(
						"typeParams",
						"typeParams",
						MakeAll_TypeExpr(
							Make_TypeRef_primitive(
								"Vector",
							),
							[]TypeExpr{
								MakeAll_TypeExpr(
									Make_TypeRef_reference(
										MakeAll_ScopedName(
											"sys.adlast",
											"Ident",
										),
									),
									[]TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					MakeAll_Field(
						"fields",
						"fields",
						MakeAll_TypeExpr(
							Make_TypeRef_primitive(
								"Vector",
							),
							[]TypeExpr{
								MakeAll_TypeExpr(
									Make_TypeRef_reference(
										MakeAll_ScopedName(
											"sys.adlast",
											"Field",
										),
									),
									[]TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("sys.adlast", decl)
}

func init() {
	RESOLVER.Register(
		adlast.Make_ScopedName("sys.adlast", "Union"),
		AST_Union(),
	)
}
