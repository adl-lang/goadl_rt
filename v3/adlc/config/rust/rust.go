// Code generated by goadlc v3 - DO NOT EDIT.
package rust

import (
	"fmt"
)

type RustCustomType struct {
	_RustCustomType
}

type _RustCustomType struct {
	Rustname            string   `json:"rustname"`
	Helpers             string   `json:"helpers"`
	GenerateOrigADLType string   `json:"generateOrigADLType"`
	StdTraits           []string `json:"stdTraits"`
}

func MakeAll_RustCustomType(
	rustname string,
	helpers string,
	generateorigadltype string,
	stdtraits []string,
) RustCustomType {
	return RustCustomType{
		_RustCustomType{
			Rustname:            rustname,
			Helpers:             helpers,
			GenerateOrigADLType: generateorigadltype,
			StdTraits:           stdtraits,
		},
	}
}

func Make_RustCustomType(
	rustname string,
	helpers string,
	stdtraits []string,
) RustCustomType {
	ret := RustCustomType{
		_RustCustomType{
			Rustname:            rustname,
			Helpers:             helpers,
			GenerateOrigADLType: ((*RustCustomType)(nil)).Default_generateOrigADLType(),
			StdTraits:           stdtraits,
		},
	}
	return ret
}

func (*RustCustomType) Default_generateOrigADLType() string {
	return ""
}

type RustGenerate = bool

type RustStorageModel struct {
	Branch RustStorageModelBranch
}

type RustStorageModelBranch interface {
	isRustStorageModelBranch()
}

func (*RustStorageModel) MakeNewBranch(key string) (any, error) {
	switch key {
	case "standard":
		return &_RustStorageModel_Standard{}, nil
	case "boxed":
		return &_RustStorageModel_Boxed{}, nil
	}
	return nil, fmt.Errorf("unknown branch is : %s", key)
}

type _RustStorageModel_Standard struct {
	V struct{} `branch:"standard"`
}
type _RustStorageModel_Boxed struct {
	V struct{} `branch:"boxed"`
}

func (_RustStorageModel_Standard) isRustStorageModelBranch() {}
func (_RustStorageModel_Boxed) isRustStorageModelBranch()    {}

func Make_RustStorageModel_standard() RustStorageModel {
	return RustStorageModel{
		_RustStorageModel_Standard{struct{}{}},
	}
}

func Make_RustStorageModel_boxed() RustStorageModel {
	return RustStorageModel{
		_RustStorageModel_Boxed{struct{}{}},
	}
}

func (un RustStorageModel) Cast_standard() (struct{}, bool) {
	br, ok := un.Branch.(_RustStorageModel_Standard)
	return br.V, ok
}

func (un RustStorageModel) Cast_boxed() (struct{}, bool) {
	br, ok := un.Branch.(_RustStorageModel_Boxed)
	return br.V, ok
}

func Handle_RustStorageModel[T any](
	_in RustStorageModel,
	standard func(standard struct{}) T,
	boxed func(boxed struct{}) T,
	_default func() T,
) T {
	switch _b := _in.Branch.(type) {
	case _RustStorageModel_Standard:
		if standard != nil {
			return standard(_b.V)
		}
	case _RustStorageModel_Boxed:
		if boxed != nil {
			return boxed(_b.V)
		}
	}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : RustStorageModel")
}

func HandleWithErr_RustStorageModel[T any](
	_in RustStorageModel,
	standard func(standard struct{}) (T, error),
	boxed func(boxed struct{}) (T, error),
	_default func() (T, error),
) (T, error) {
	switch _b := _in.Branch.(type) {
	case _RustStorageModel_Standard:
		if standard != nil {
			return standard(_b.V)
		}
	case _RustStorageModel_Boxed:
		if boxed != nil {
			return boxed(_b.V)
		}
	}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : RustStorageModel")
}
