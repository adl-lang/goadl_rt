// Code generated by goadlc v3 - DO NOT EDIT.
package rust

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_RustCustomType() adlast.ATypeExpr[RustCustomType] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("adlc.config.rust", "RustCustomType"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[RustCustomType](te)
}

func AST_RustCustomType() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"RustCustomType",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"rustname",
						"rustname",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"helpers",
						"helpers",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"generateOrigADLType",
						"generateOrigADLType",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							"",
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"stdTraits",
						"stdTraits",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "ADL declaration annotation to specify that a custom type\nshould be used\n"},
	)
	return adlast.Make_ScopedDecl("adlc.config.rust", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("adlc.config.rust", "RustCustomType"),
		AST_RustCustomType(),
	)
}

func Texpr_RustGenerate() adlast.ATypeExpr[RustGenerate] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("adlc.config.rust", "RustGenerate"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[RustGenerate](te)
}

func AST_RustGenerate() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"RustGenerate",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"Bool",
					),
					[]adlast.TypeExpr{},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "ADL module or declaration annotation to control\nwhether code is actually generated.\n"},
	)
	return adlast.Make_ScopedDecl("adlc.config.rust", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("adlc.config.rust", "RustGenerate"),
		AST_RustGenerate(),
	)
}

func Texpr_RustStorageModel() adlast.ATypeExpr[RustStorageModel] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("adlc.config.rust", "RustStorageModel"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[RustStorageModel](te)
}

func AST_RustStorageModel() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"RustStorageModel",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_union_(
			adlast.MakeAll_Union(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"standard",
						"standard",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Void",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Standard inline storage\n"},
					),
					adlast.MakeAll_Field(
						"boxed",
						"boxed",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Void",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Store the value in a Box<>\n"},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "ADL field annotation giving explicit control over\nhow a field should be stored.\n"},
	)
	return adlast.Make_ScopedDecl("adlc.config.rust", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("adlc.config.rust", "RustStorageModel"),
		AST_RustStorageModel(),
	)
}
