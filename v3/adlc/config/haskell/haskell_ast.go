// Code generated by goadlc v3 - DO NOT EDIT.
package haskell

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_HaskellCustomType() adlast.ATypeExpr[HaskellCustomType] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("adlc.config.haskell", "HaskellCustomType"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[HaskellCustomType](te)
}

func AST_HaskellCustomType() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"HaskellCustomType",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"haskellname",
						"haskellname",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"haskellimports",
						"haskellimports",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"haskellextraexports",
						"haskellextraexports",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							[]interface{}{},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"insertCode",
						"insertCode",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_primitive(
										"String",
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"generateOrigADLType",
						"generateOrigADLType",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							"",
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"structConstructor",
						"structConstructor",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							"",
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"unionConstructors",
						"unionConstructors",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Vector",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"adlc.config.haskell",
											"UnionConstructor",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							[]interface{}{},
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("adlc.config.haskell", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("adlc.config.haskell", "HaskellCustomType"),
		AST_HaskellCustomType(),
	)
}

func Texpr_HaskellFieldPrefix() adlast.ATypeExpr[HaskellFieldPrefix] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("adlc.config.haskell", "HaskellFieldPrefix"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[HaskellFieldPrefix](te)
}

func AST_HaskellFieldPrefix() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"HaskellFieldPrefix",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_type_(
			adlast.MakeAll_TypeDef(
				[]adlast.Ident{},
				adlast.MakeAll_TypeExpr(
					adlast.Make_TypeRef_primitive(
						"String",
					),
					[]adlast.TypeExpr{},
				),
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Annotation to override the field prefix for structs\nand unions. It may be applied to the struct or union\ndeclaration or to individual fields.\n"},
	)
	return adlast.Make_ScopedDecl("adlc.config.haskell", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("adlc.config.haskell", "HaskellFieldPrefix"),
		AST_HaskellFieldPrefix(),
	)
}

func Texpr_UnionConstructor() adlast.ATypeExpr[UnionConstructor] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("adlc.config.haskell", "UnionConstructor"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[UnionConstructor](te)
}

func AST_UnionConstructor() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"UnionConstructor",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"fieldName",
						"fieldName",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"constructor",
						"constructor",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("adlc.config.haskell", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("adlc.config.haskell", "UnionConstructor"),
		AST_UnionConstructor(),
	)
}
