// Code generated by goadlc v3 - DO NOT EDIT.
package go_

import ()

type GoCustomType struct {
	Gotype  GoType       `json:"gotype"`
	Helpers GoHelperType `json:"helpers"`
}

func New_GoCustomType(
	gotype GoType,
	helpers GoHelperType,
) GoCustomType {
	return GoCustomType{
		Gotype:  gotype,
		Helpers: helpers,
	}
}

func Make_GoCustomType(
	gotype GoType,
	helpers GoHelperType,
) GoCustomType {
	ret := GoCustomType{
		Gotype:  gotype,
		Helpers: helpers,
	}
	return ret
}

type GoHelperType struct {
	Name        string `json:"name"`
	Pkg         string `json:"pkg"`
	Import_path string `json:"import_path"`
}

func New_GoHelperType(
	name string,
	pkg string,
	import_path string,
) GoHelperType {
	return GoHelperType{
		Name:        name,
		Pkg:         pkg,
		Import_path: import_path,
	}
}

func Make_GoHelperType(
	name string,
	pkg string,
	import_path string,
) GoHelperType {
	ret := GoHelperType{
		Name:        name,
		Pkg:         pkg,
		Import_path: import_path,
	}
	return ret
}

type GoType struct {
	Name        string      `json:"name"`
	Pkg         string      `json:"pkg"`
	Import_path string      `json:"import_path"`
	Type_params []TypeParam `json:"type_params"`
}

func New_GoType(
	name string,
	pkg string,
	import_path string,
	type_params []TypeParam,
) GoType {
	return GoType{
		Name:        name,
		Pkg:         pkg,
		Import_path: import_path,
		Type_params: type_params,
	}
}

func Make_GoType(
	name string,
	pkg string,
	import_path string,
	type_params []TypeParam,
) GoType {
	ret := GoType{
		Name:        name,
		Pkg:         pkg,
		Import_path: import_path,
		Type_params: type_params,
	}
	return ret
}

type TypeParam struct {
	Name       string `json:"name"`
	Implements string `json:"implements"`
}

func New_TypeParam(
	name string,
	implements string,
) TypeParam {
	return TypeParam{
		Name:       name,
		Implements: implements,
	}
}

func Make_TypeParam(
	name string,
	implements string,
) TypeParam {
	ret := TypeParam{
		Name:       name,
		Implements: implements,
	}
	return ret
}
