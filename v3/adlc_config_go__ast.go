// Code generated by goadlc v3 - DO NOT EDIT.
package goadl

import (
	. "github.com/adl-lang/goadl_rt/v3/adlc/config/go_"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_GoCustomType() ATypeExpr[GoCustomType] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("adlc.config.go_", "GoCustomType"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[GoCustomType]{
		Value: te,
	}
}

func AST_GoCustomType() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "GoCustomType",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "gotype",
							SerializedName: "gotype",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "adlc.config.go_",
											Name:       "GoType",
										}},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{ /**/ adlast.ScopedName{ModuleName: "sys.annotations", Name: "Doc"}: "The Go struct to use\n\nNote currently interfaces are not supported\n"},
						},
						adlast.Field{
							Name:           "helpers",
							SerializedName: "helpers",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Reference{
										V: adlast.ScopedName{
											ModuleName: "adlc.config.go_",
											Name:       "GoHelperType",
										}},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{ /**/ adlast.ScopedName{ModuleName: "sys.annotations", Name: "Doc"}: "The Go structed which implements json Marshal and Unmarshal for the gotype.\n\nNote Marshal and Unmarshal must be implemented for the specified struct's nil ptr\n"},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{ /**/ adlast.ScopedName{ModuleName: "sys.annotations", Name: "Doc"}: "ADL declaration annotation to specify the custom type to use\n"},
	}
	return adlast.ScopedDecl{
		ModuleName: "adlc.config.go_",
		Decl:       decl,
	}
}

func init() {
	RESOLVER.Register(
		adlast.ScopedName{ModuleName: "adlc.config.go_", Name: "GoCustomType"},
		AST_GoCustomType(),
	)
}

func Texpr_GoHelperType() ATypeExpr[GoHelperType] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("adlc.config.go_", "GoHelperType"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[GoHelperType]{
		Value: te,
	}
}

func AST_GoHelperType() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "GoHelperType",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "name",
							SerializedName: "name",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "String"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "pkg",
							SerializedName: "pkg",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "String"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "import_path",
							SerializedName: "import_path",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "String"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "adlc.config.go_",
		Decl:       decl,
	}
}

func init() {
	RESOLVER.Register(
		adlast.ScopedName{ModuleName: "adlc.config.go_", Name: "GoHelperType"},
		AST_GoHelperType(),
	)
}

func Texpr_GoType() ATypeExpr[GoType] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("adlc.config.go_", "GoType"),
		),
		[]adlast.TypeExpr{},
	)
	return ATypeExpr[GoType]{
		Value: te,
	}
}

func AST_GoType() adlast.ScopedDecl {
	decl := adlast.Decl{
		Name: "GoType",
		Version: types.Maybe[uint32]{
			Branch: types.Maybe_Nothing{
				V: struct{}{}},
		},
		Type_: adlast.DeclType{
			Branch: adlast.DeclType_Struct_{
				V: adlast.Struct{
					TypeParams: []adlast.Ident{},
					Fields: []adlast.Field{
						adlast.Field{
							Name:           "name",
							SerializedName: "name",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "String"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "pkg",
							SerializedName: "pkg",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "String"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
						adlast.Field{
							Name:           "import_path",
							SerializedName: "import_path",
							TypeExpr: adlast.TypeExpr{
								TypeRef: adlast.TypeRef{
									Branch: adlast.TypeRef_Primitive{
										V: "String"},
								},
								Parameters: []adlast.TypeExpr{},
							},
							Default: types.Maybe[any]{
								Branch: types.Maybe_Nothing{
									V: struct{}{}},
							},
							Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
						},
					},
				}},
		},
		Annotations: customtypes.MapMap[adlast.ScopedName, any]{},
	}
	return adlast.ScopedDecl{
		ModuleName: "adlc.config.go_",
		Decl:       decl,
	}
}

func init() {
	RESOLVER.Register(
		adlast.ScopedName{ModuleName: "adlc.config.go_", Name: "GoType"},
		AST_GoType(),
	)
}
